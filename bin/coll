#!/bin/env python3
import os
from pathlib import Path
from datetime import datetime
import hashlib
from random import randrange
import re

import argparse
from photocollage import gtkgui, render
from photocollage.render import PIL_SUPPORTED_EXTS as EXTS

EXTENSIONS = [f'.{x}' for v in EXTS.RW.values() for x in v]


def get_files(path, filter):
    query_dir = Path(path)
    filter_q = f'*{filter}*' if filter else '*'
    files = [p for p in query_dir.glob(filter_q) if p.suffix in EXTENSIONS]
    return files


def parse_aspect(aspect):
    ex = re.compile("^[0-9]*x[0-9]*$")
    if ex.match(aspect):
        return tuple(map(int, aspect.split("x")))
    else:
        raise ValueError("Aspect format is 9999x9999")


def calculate_aspect(aspect):
    aspect_size = {
            "uqhd": (3440, 1440),
            "v": (1440, 3120),
            "wqhd": (2560, 1440),
            "fhd": (1920, 1080),
            "hd": (1280, 720)
            }
    return aspect_size.get(aspect) or parse_aspect(aspect)


def out_name(paths, index=0):
    prefix = hashlib.md5(paths.encode('utf-8')).hexdigest()
    return f'{prefix}_{datetime.now()}_{index}.png'.replace(' ', '_').replace(
            ':', '_')


def generate_collage(files, scale, aspect_ratio):
    (base_w, base_h) = aspect_ratio

    class Options:
        def __init__(self):
            self.border_w = 0.01
            self.border_c = "black"
            self.out_w = int(base_w*scale)
            self.out_h = int(base_h*scale)

    fss = render.build_photolist(files)
    uc = gtkgui.UserCollage(fss)
    opts = Options()
    print(f'Output resolution: {opts.out_w}x{opts.out_h} for: {len(files)}')
    uc.make_page(opts)
    uc.page.scale_to_fit(opts.out_w, opts.out_h)
    return uc


def save_collage(collage, path):
    t = render.RenderingTask(collage.page, output_file=path)
    t.run()
    print(output)


def split_files(files, size):
    splits = []
    while len(files) > 0:
        splits.append([files.pop(randrange(len(files))) for i in range(
            size) if len(files) > 0])
    return splits


def process_files(files, aspect_ratio):
    scale = max(min(len(files)/30, max_scale), 1)
    coll = generate_collage(files, scale, aspect_ratio)
    return coll


parser = argparse.ArgumentParser()
parser.add_argument('paths', default="i")
parser.add_argument('-f', '--filter', required=False)
parser.add_argument('-d', '--filter-directory', required=False)
parser.add_argument('-s', '--max-scale', required=False,
                    default=10, type=float)
parser.add_argument('-a', '--aspect', required=False, default="wqhd")
parser.add_argument('-n', '--number', required=False,
                    default=10, type=int)
args = parser.parse_args()

paths_input = args.paths
filter = args.filter
filter_directory = args.filter_directory
max_scale = args.max_scale
aspect = args.aspect
size = args.number

root_dir = Path(os.environ["VID_DIR"], "dump")
paths = [d for d in Path(root_dir, paths_input).glob(
    f'*{filter_directory}*') if d.is_dir()
] if filter_directory else paths_input.split(',')
files = [file for path in paths for file in get_files(
    Path(root_dir, path), filter)]

total_files = len(files)
if total_files == 0:
    print(f'No files found at {paths_input}')
    quit()

splits = split_files(files, size)
print(f'Processing {total_files} files in {len(splits)} parts')

aspect_ratio = calculate_aspect(aspect)

collages = [process_files(i, aspect_ratio) for i in splits]

for n in range(len(collages)):
    output = Path(root_dir, out_name(paths_input, n))
    save_collage(collages[n], output)
