#!/bin/env python3
import os
from os import path
from pathlib import Path
from datetime import datetime
import hashlib

import argparse
from photocollage import gtkgui, render, collage
from photocollage.render import PIL_SUPPORTED_EXTS as EXTS

EXTENSIONS = [f'.{x}' for v in EXTS.RW.values() for x in v]


def get_files(path, filter):
    query_dir = Path(path)
    filter_q = f'*{filter}*' if filter else '*'
    files = [p for p in query_dir.glob(filter_q) if p.suffix in EXTENSIONS]
    return files


def out_name(paths):
    prefix = hashlib.md5(paths.encode('utf-8')).hexdigest()
    return f'{prefix}_{datetime.now()}.png'.replace(' ', '_')


def generate_collage(files, scale):
    class Options:
        def __init__(self):
            self.border_w = 0.01
            self.border_c = "black"
            self.out_w = int(2560*scale)
            self.out_h = int(1440*scale)

    fss = render.build_photolist(files)
    uc = gtkgui.UserCollage(fss)
    opts = Options()
    print(f'Output resolution: {opts.out_w}x{opts.out_h}')
    uc.make_page(opts)
    uc.page.scale_to_fit(opts.out_w, opts.out_h)
    return uc


def save_collage(collage, path):
    t = render.RenderingTask(collage.page, output_file=path)
    t.run()
    print(output)


parser = argparse.ArgumentParser()
parser.add_argument('paths', default="i")
parser.add_argument('-f', '--filter', required=False)
parser.add_argument('-d', '--filter-directory', required=False)
parser.add_argument('-s', '--max-scale', required=False, default=10, type=float)
args = parser.parse_args()

paths_input = args.paths
filter = args.filter
filter_directory = args.filter_directory
max_scale = args.max_scale

root_dir = Path(os.environ["VID_DIR"], "dump")
paths = [d for d in Path(root_dir, paths_input).glob(
    f'*{filter_directory}*') if d.is_dir()] if filter_directory else paths_input.split(',')
files = [file for path in paths for file in get_files(
    Path(root_dir, path), filter)]

if len(files) == 0:
    print(f'No files found at {paths_input}')
    quit()

print(f'Processing {len(files)} files')
scale = max(min(len(files)/30, max_scale), 1)
collage = generate_collage(files, scale)
output = Path(root_dir, out_name(paths_input))
save_collage(collage, output)
